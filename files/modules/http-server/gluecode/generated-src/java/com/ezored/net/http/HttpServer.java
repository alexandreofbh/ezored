// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

package com.ezored.net.http;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class HttpServer {
    public abstract void initialize(HttpServerConfig config);

    public abstract HttpServerConfig getConfig();

    public abstract void start();

    public abstract void stop();

    public abstract void waitForTermination();

    public static HttpServer shared()
    {
        return CppProxy.shared();
    }

    private static final class CppProxy extends HttpServer
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void initialize(HttpServerConfig config)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_initialize(this.nativeRef, config);
        }
        private native void native_initialize(long _nativeRef, HttpServerConfig config);

        @Override
        public HttpServerConfig getConfig()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getConfig(this.nativeRef);
        }
        private native HttpServerConfig native_getConfig(long _nativeRef);

        @Override
        public void start()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef);
        }
        private native void native_start(long _nativeRef);

        @Override
        public void stop()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stop(this.nativeRef);
        }
        private native void native_stop(long _nativeRef);

        @Override
        public void waitForTermination()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_waitForTermination(this.nativeRef);
        }
        private native void native_waitForTermination(long _nativeRef);

        public static native HttpServer shared();
    }
}
